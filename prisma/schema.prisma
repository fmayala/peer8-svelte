generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  email                   String                    @unique @db.VarChar(255)
  type                    String                    @db.VarChar(255)
  created_at              DateTime                  @default(now())
  last_updated            DateTime                  @default(now())
  classes                 classes[]
  class_students          class_students[]
  peer_review_submissions peer_review_submissions[]
  peer_review_assignments peer_review_assignments[]
  templates               templates[]
  peer_review_responses   peer_review_responses[]
  scoredReviews           peer_review_scores[]      @relation("scores_scorer")
  receivedScores          peer_review_scores[]      @relation("scores_student")
}

model classes {
  id             Int              @id @default(autoincrement())
  instructor_id  Int
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now())
  last_updated   DateTime         @default(now())
  users          users            @relation(fields: [instructor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_instructor_id")
  class_students class_students[]
  peer_reviews   peer_reviews[]
}

model class_students {
  id         Int     @id @default(autoincrement())
  class_id   Int
  student_id Int
  accepted   Boolean
  classes    classes @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id")
  users      users   @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_student_id")
}

model templates {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  max_points   Int
  created_at   DateTime       @default(now())
  last_updated DateTime       @default(now())
  creator_id   Int
  questions    questions[]
  peer_reviews peer_reviews[]
  creator      users          @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_creator_id")
}

model questions {
  id           Int                     @id @default(autoincrement())
  template_id  Int
  question     String                  @db.VarChar(255)
  max_points   Int
  created_at   DateTime                @default(now())
  last_updated DateTime                @default(now())
  templates    templates               @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_template_id")
  responses    peer_review_responses[]
}

model peer_reviews {
  id                      Int                       @id @default(autoincrement())
  class_id                Int
  template_id             Int?
  name                    String                    @db.VarChar(255)
  description             String?
  status                  String                    @default("assigned") @db.VarChar(255)
  due_date                DateTime?
  created_at              DateTime                  @default(now())
  last_updated            DateTime                  @default(now())
  templates               templates?                @relation(fields: [template_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_template_id_2")
  classes                 classes                   @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_class_id_2")
  peer_review_assignments peer_review_assignments[]
  peer_review_groups      peer_review_groups[]
  peer_review_submissions peer_review_submissions[]
}

model peer_review_assignments {
  id                      Int                       @id @default(autoincrement())
  peer_review_id          Int
  group_id                Int?
  student_id              Int
  status                  String                    @db.VarChar(255)
  final_score             Float?                      @default(0)
  created_at              DateTime                  @default(now())
  last_updated            DateTime                  @default(now())
  comments                String?
  peer_reviews            peer_reviews              @relation(fields: [peer_review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_peer_review_id")
  users                   users                     @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_student_id_2")
  peer_review_submissions peer_review_submissions[]
  peer_review_responses   peer_review_responses[]
  peer_review_groups      peer_review_groups?       @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_id")
}

model peer_review_responses {
  id                        Int                      @id @default(autoincrement())
  peer_review_assignment_id Int
  peer_review_submission_id Int?
  question_id               Int
  student_id                Int
  score                     Float?
  comments                  String?
  created_at                DateTime                 @default(now())
  last_updated              DateTime                 @default(now())
  peer_review_submissions   peer_review_submissions? @relation(fields: [peer_review_submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_peer_review_submission_id")
  student                   users                    @relation(fields: [student_id], references: [id])
  question                  questions                @relation(fields: [question_id], references: [id])
  peer_review_assignment    peer_review_assignments  @relation(fields: [peer_review_assignment_id], references: [id])
}

model peer_review_groups {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  peer_review_id          Int
  created_at              DateTime                  @default(now())
  last_updated            DateTime                  @default(now())
  peer_review_submissions peer_review_submissions[]
  peer_reviews            peer_reviews              @relation(fields: [peer_review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_peer_review_id_2")
  peer_review_assignments peer_review_assignments[]
}

model peer_review_submissions {
  id                        Int                     @id @default(autoincrement())
  peer_review_assignment_id Int
  peer_review_id            Int?
  peer_review_group_id      Int?
  student_id                Int
  score                     Float?
  created_at                DateTime                @default(now())
  last_updated              DateTime                @default(now())
  peer_review_responses     peer_review_responses[]
  peer_review_groups        peer_review_groups?     @relation(fields: [peer_review_group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_peer_review_group_id")
  peer_reviews              peer_reviews?           @relation(fields: [peer_review_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_peer_review_id_3")
  peer_review_assignments   peer_review_assignments @relation(fields: [peer_review_assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_peer_review_assignment_id_2")
  users                     users                   @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_student_id_3")
  peer_review_scores        peer_review_scores[]
}

model peer_review_scores {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  score     Int
  student   users    @relation("scores_student", fields: [studentId], references: [id])
  scorer    users    @relation("scores_scorer", fields: [scorerId], references: [id])
  studentId Int
  scorerId  Int
  submission_id Int?
  submission peer_review_submissions? @relation(fields: [submission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_submission_id")
}